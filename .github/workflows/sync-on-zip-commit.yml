name: Sync from ZIP upload (incoming/)

on:
  push:
    paths:
      - 'incoming/*.zip'
  workflow_dispatch: {}  # permite rodar manualmente

concurrency:
  group: sync-incoming
  cancel-in-progress: true

permissions:
  contents: write
  pull-requests: write

jobs:
  unzip-and-sync:
    runs-on: ubuntu-latest

    steps:
      - name: Version marker
        run: echo "SYNC WF v7 - PR mode + ROOT autodetect"

      - name: Checkout repo
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          persist-credentials: true

      - name: Align working tree to origin/main
        shell: bash
        run: |
          set -euxo pipefail
          git config --global --add safe.directory "$GITHUB_WORKSPACE"
          BR="${GITHUB_REF_NAME:-main}"
          git fetch origin "$BR"
          git checkout "$BR"
          git reset --hard "origin/$BR"

      - name: Install tools
        run: sudo apt-get update && sudo apt-get install -y unzip rsync zipinfo

      - name: Find latest ZIP in incoming/
        id: findzip
        shell: bash
        run: |
          set -euxo pipefail
          LATEST="$(ls -t incoming/*.zip 2>/dev/null | head -n1 || true)"
          if [ -z "$LATEST" ]; then
            echo "Nenhum ZIP em incoming/"; exit 1
          fi
          echo "zip_path=$LATEST" >> "$GITHUB_OUTPUT"
          echo "ZIP encontrado: $LATEST"

      - name: Validate ZIP paths (no / or ../)
        shell: bash
        run: |
          set -euxo pipefail
          LIST="$(zipinfo -1 "${{ steps.findzip.outputs.zip_path }}")"
          if echo "$LIST" | grep -E '(^/|(^|/)\.\.(/|$))' >/dev/null; then
            echo "ZIP contém caminhos inválidos (absolutos ou ../). Abortando."; exit 2
          fi

      - name: Unzip payload
        shell: bash
        run: |
          set -euxo pipefail
          rm -rf /tmp/_unz && mkdir -p /tmp/_unz
          unzip -q "${{ steps.findzip.outputs.zip_path }}" -d /tmp/_unz
          # Bloqueia symlinks no pacote
          if find /tmp/_unz -xtype l -print -quit | grep .; then
            echo "ZIP contém symlinks. Abortando por segurança."; exit 3
          fi
          echo "Conteúdo extraído:"; ls -la /tmp/_unz
          # (Não escrevemos /tmp/root_path — sem estado entre passos)

      - name: Sync files to repo (com proteção)
        shell: bash
        run: |
          set -euxo pipefail
          # === Autodetecta diretório raiz do payload ===
          ROOT="/tmp/_unz"
          if [ ! -d "$ROOT" ]; then
            echo "Erro: diretório $ROOT não existe"; exit 4
          fi
          DIRS=$(find "$ROOT" -mindepth 1 -maxdepth 1 -type d | wc -l)
          FILES=$(find "$ROOT" -mindepth 1 -maxdepth 1 -type f | wc -l)
          if [ "$DIRS" -eq 1 ] && [ "$FILES" -eq 0 ]; then
            ROOT="$(find "$ROOT" -mindepth 1 -maxdepth 1 -type d | head -n1)"
          fi
          echo "ROOT autodetectado: $ROOT"
          test -d "$ROOT"

          # === Sync (sem tocar em .github/ e incoming/) ===
          rsync -av --delete --safe-links \
            --exclude '.git' \
            --exclude '.github' \
            --exclude 'incoming' \
            --exclude 'node_modules' \
            --exclude 'dist' \
            "$ROOT"/ ./

          # Cinto extra: restaura caso algo toque nessas pastas
          git checkout -- .github .github/workflows incoming || true
          git status --porcelain

      - name: Remove processed ZIP
        shell: bash
        run: |
          set -euxo pipefail
          rm -f "${{ steps.findzip.outputs.zip_path }}" || true

      - name: Prepare PR branch
        id: br
        shell: bash
        run: |
          set -euxo pipefail
          git config user.name  "github-actions[bot]"
          git config user.email "41898282+github-actions[bot]@users.noreply.github.com"

          BASE="origin/${GITHUB_REF_NAME:-main}"
          TS="$(date +'%Y%m%d-%H%M%S')"
          BRANCH="bot/sync-incoming-${TS}"

          git fetch origin
          git checkout -B "${BRANCH}" "${BASE}"

          if [ -n "$(git status --porcelain)" ]; then
            git add -A
            git commit -m "chore: sync from incoming ZIP ${TS} (PR mode)"
            git push -u origin "${BRANCH}"
            echo "branch=${BRANCH}" >> "$GITHUB_OUTPUT"
          else
            echo "Sem mudanças para commit."
            echo "branch=" >> "$GITHUB_OUTPUT"
          fi

      - name: Open Pull Request
        if: steps.br.outputs.branch != ''
        uses: peter-evans/create-pull-request@v6
        with:
          commit-message: "chore: sync from ZIP (PR mode)"
          title: "Sync from ZIP upload — ${{ steps.br.outputs.branch }}"
          body: |
            PR criado automaticamente a partir do ZIP mais recente em `incoming/`.
            - Proteção a `.github/` e `incoming/`.
            - ZIP processado removido após sync.
          branch: ${{ steps.br.outputs.branch }}
          base: ${{ github.ref_name }}
          labels: sync, automation
          delete-branch: true
